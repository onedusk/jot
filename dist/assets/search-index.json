{
  "documents": [
    {
      "id": "CHANGELOG",
      "title": "Changelog",
      "path": "CHANGELOG.html",
      "content": "Changelog All notable changes to Jot will be documented in this file. The format is based on Keep a Changelog, and this project adheres to Semantic Versioning. [Unreleased] - 2025-10-12 Fixed - Performance: Replaced with in markdown compiler for better performance - Document Chunking: Fixed overlap calculation in function to properly track character positions instead of mixing word indices with character counts - HTML Rendering: Fixed code block rendering to properly add language classes to both and tags for better syntax highlighting support - Breadcrumb Navigation: Fixed breadcrumb path generation to use correct absolute paths for directories and files - Navigation Tree: Added missing class wrapper to navigation output - Template: Updated page title format to include \"Jot\" branding - Test Suite: Fixed test expectations to match actual implementation behavior Changed - Improved document chunking algorithm for more accurate text segmentation with proper overlap handling [0.0.5] - 2025-10-07 Added - GoDoc Generation: Added comprehensive GoDoc comments to all Go source files in the and directories to improve code clarity and maintainability. This includes documentation for all public types, functions, and methods. Changed - Improved code documentation across the entire Go codebase. [0.0.4] - 2025-10-04 Added - Local Development Server: Implemented command for local documentation preview - HTTP server with configurable port (default 8080) - Automatic browser opening with cross-platform support (Linux, macOS, Windows) - Smart index handling (serves README.html as default, fallback to index.html) - Static file serving for CSS, JS, images, and other assets - Comprehensive error handling with helpful user guidance Features - : Set custom server port - : Control browser auto-opening (default: true) - : Override serve directory (default: ./dist) Technical Improvements - Proper HTTP file server implementation - Cross-platform browser launching support - Configuration integration with existing Viper setup - Graceful error handling for missing build artifacts [0.0.3] - 2025-10-03 Added - Sidebar items are now collapsible dropdowns for better organization. Changed - Updated navigation bar icon and background to a \"dusk\" themed gradient. - Refactored CSS out of the HTML template into a separate file. - Updated the build process to copy the new file to the output directory, reducing the size of generated HTML files. [0.0.2] - 2025-08-20 Added UI/UX Enhancements - Modern Glassmorphic Sidebar: Complete redesign with glass-morphism effects - Collapsible sidebar (72px collapsed, 280px expanded) - Blur effects with backdrop-filter - Smooth cubic-bezier animations - Dark theme with refined color palette - macOS-Style Window Controls: Traffic light controls (red, yellow, green) - Fade to gray when sidebar not hovered - Native macOS positioning and styling - Enhanced Navigation System: - Icon-based navigation with SVG icons - Dynamic icon selection based on content type - Smooth expand/collapse animations - Active state indicators with accent colors - Profile \u0026 Search Integration: - Gradient avatar display - Integrated search bar with icon - Opacity transitions on hover/expand - Refined Typography \u0026 Spacing: - Improved font sizing and line heights - Better visual hierarchy - Optimized whitespace and padding Changed - Updated HTML template generation for modern design - Improved navigation node rendering with icons - Enhanced color scheme for better readability - Refined hover states and transitions - Optimized sidebar interactions Technical Improvements - Better CSS variable organization - Improved responsive design patterns - Enhanced animation performance - Cleaner component architecture [0.0.1] - 2025-08-13 Added Core Features - File Scanner: Recursive markdown file scanning with configurable ignore patterns - TOC Generator: Hierarchical XML table of contents generation from document structure - HTML Renderer: Markdown to HTML conversion with syntax highlighting and modern styling - Search Functionality: Client-side full-text search with JSON index generation - CLI Interface: Comprehensive command-line interface using Cobra framework - : Initialize new documentation project - : Build documentation from markdown files - : Start development server (planned) - : Watch for changes and rebuild (planned) - : Export documentation in various formats Document Processing - Markdown parsing with Blackfriday v2 - Automatic heading extraction for navigation - Smart internal link resolution ( to ) - Relative path handling for all assets and links - Breadcrumb navigation generation Export Formats - JSON export with document chunking for LLM consumption - YAML export for configuration and data interchange - Search index generation for client-side search Styling and UI - Professional syntax highlighting based on Tailwind CSS theme - Dark mode support with automatic detection - Responsive design for mobile and desktop - Interactive code copy buttons - Keyboard shortcuts (Ctrl+K for search) Build and Distribution - Single binary distribution with no runtime dependencies - Cross-platform support (macOS, Linux, Windows) - Docker container support - Automated release workflow with GitHub Actions Technical Implementation - Written in Go for performance and portability - Test-Driven Development (TDD) approach - SPARC methodology for systematic development - Modular architecture with clear separation of concerns - Comprehensive test coverage Documentation - Complete requirements specification - System architecture documentation - Pseudocode design documents - Usage examples and quick start guide Known Limitations - Live reload not yet implemented - Version control integration planned for future release - LLM API endpoints planned for future release Future Releases [0.2.0] - Planned - Live reload functionality for development server - Version control and change tracking - LLM/Agent API endpoints - Multiple theme support [0.3.0] - Planned - Plugin system - Cloud deployment features - Advanced search with filters - Multi-language support --- For more information, see the README",
      "headings": [
        "Changelog",
        "[Unreleased] - 2025-10-12",
        "Fixed",
        "Changed",
        "[0.0.5] - 2025-10-07",
        "Added",
        "Changed",
        "[0.0.4] - 2025-10-04",
        "Added",
        "Features",
        "Technical Improvements",
        "[0.0.3] - 2025-10-03",
        "Added",
        "Changed",
        "[0.0.2] - 2025-08-20",
        "Added",
        "UI/UX Enhancements",
        "Changed",
        "Technical Improvements",
        "[0.0.1] - 2025-08-13",
        "Added",
        "Core Features",
        "Document Processing",
        "Export Formats",
        "Styling and UI",
        "Build and Distribution",
        "Technical Implementation",
        "Documentation",
        "Known Limitations",
        "Future Releases",
        "[0.2.0] - Planned",
        "[0.3.0] - Planned"
      ],
      "keywords": [
        "highlighting",
        "markdown",
        "comprehensive",
        "search",
        "breadcrumb",
        "based",
        "files",
        "modern",
        "features",
        "technical",
        "server",
        "syntax",
        "performance",
        "code",
        "template",
        "navigation",
        "design",
        "sidebar",
        "planned",
        "development",
        "browser",
        "better",
        "index",
        "generation",
        "control",
        "implementation",
        "icon",
        "integration",
        "system",
        "document",
        "build",
        "theme",
        "rendering",
        "added",
        "improved",
        "architecture",
        "enhanced",
        "file",
        "release",
        "chunking",
        "automatic",
        "updated",
        "handling",
        "fixed",
        "changed",
        "html",
        "refined",
        "support",
        "documentation",
        "(default",
        "styling",
        "test",
        "cross-platform",
        "future",
        "export"
      ],
      "summary": "Changelog All notable changes to Jot will be documented in this file. The format is based on Keep a Changelog, and this project adheres to Semantic Versioning. [Unreleased] - 2025-10-12 Fixed - Perfor...",
      "modified": "2025-10-21T12:58:11Z",
      "wordCount": 943,
      "readTime": "3min"
    },
    {
      "id": "CODE_OF_CONDUCT",
      "title": "Code of Conduct",
      "path": "CODE_OF_CONDUCT.html",
      "content": "Code of Conduct Our Pledge We pledge to make participation in our project a harassment-free experience for everyone, regardless of age, body size, disability, ethnicity, sex characteristics, gender identity and expression, level of experience, education, socio-economic status, nationality, personal appearance, race, religion, or sexual identity and orientation. Our Standards Examples of behavior that contributes to a positive environment: Using welcoming and inclusive language Being respectful of differing viewpoints and experiences Gracefully accepting constructive criticism Focusing on what is best for the community Showing empathy towards other community members Examples of unacceptable behavior: Trolling, insulting/derogatory comments, and personal or political attacks Public or private harassment Publishing others' private information without permission Other conduct which could reasonably be considered inappropriate Our Responsibilities Project maintainers are responsible for clarifying standards of acceptable behavior and will take appropriate and fair corrective action in response to unacceptable behavior. Scope This Code of Conduct applies within all project spaces and when an individual is representing the project or its community in public spaces. Enforcement Instances of abusive, harassing, or otherwise unacceptable behavior may be reported by opening an issue. All complaints will be reviewed and investigated promptly and fairly. Attribution This Code of Conduct is adapted from the Contributor Covenant, version 2.0.",
      "headings": [
        "Code of Conduct",
        "Our Pledge",
        "Our Standards",
        "Our Responsibilities",
        "Scope",
        "Enforcement",
        "Attribution"
      ],
      "keywords": [
        "unacceptable",
        "project",
        "conduct",
        "behavior",
        "code",
        "community"
      ],
      "summary": "Code of Conduct Our Pledge We pledge to make participation in our project a harassment-free experience for everyone, regardless of age, body size, disability, ethnicity, sex characteristics, gender id...",
      "modified": "2025-10-21T12:58:11Z",
      "wordCount": 222,
      "readTime": "1min"
    },
    {
      "id": "CONTRIBUTING",
      "title": "Contributing to Jot",
      "path": "CONTRIBUTING.html",
      "content": "Contributing to Jot Thank you for your interest in contributing to Jot! This document provides guidelines for contributing to the project. Getting Started 1. Fork the repository 2. Clone your fork: 3. Create a feature branch: 4. Make your changes 5. Run tests: 6. Commit your changes 7. Push to your fork 8. Create a Pull Request Code Style - Follow standard Go formatting () - Run to catch common issues - Keep functions focused and concise - Add comments for exported functions and types - Write idiomatic Go code Testing - Write tests for new features - Ensure existing tests pass - Aim for good test coverage - Use table-driven tests where appropriate Commit Messages Use clear, descriptive commit messages: Types: , , , , , Pull Request Process 1. Update documentation for any changed functionality 2. Add tests for new features 3. Ensure CI passes 4. Request review from maintainers 5. Address review feedback 6. Squash commits if requested Questions? Open an issue for discussion or reach out to the maintainers.",
      "headings": [
        "Contributing to Jot",
        "Getting Started",
        "Code Style",
        "Testing",
        "Commit Messages",
        "Pull Request Process",
        "Questions?"
      ],
      "keywords": [
        "fork",
        "request",
        "commit",
        "tests",
        "contributing"
      ],
      "summary": "Contributing to Jot Thank you for your interest in contributing to Jot! This document provides guidelines for contributing to the project. Getting Started 1. Fork the repository 2. Clone your fork: 3....",
      "modified": "2025-10-21T12:58:11Z",
      "wordCount": 204,
      "readTime": "1min"
    },
    {
      "id": "INSTALL",
      "title": "Installing Jot",
      "path": "INSTALL.html",
      "content": "Installing Jot There are several ways to install Jot on your system. Choose the method that works best for your setup. Prerequisites - Go 1.19 or later (for building from source) - Git (for cloning the repository) Installation Methods Method 1: Using Go Install (Recommended) The simplest way to install jot is using : This installs jot to . Make sure this directory is in your PATH: Method 2: Using the Install Script Clone the repository and run the install script: The script will: - Build the binary - Install it to (may require sudo) - Verify the installation Method 3: Using Make If you have Make installed: This builds and installs jot to (requires sudo). Method 4: Manual Installation 1. Clone and build: 2. Move to a directory in your PATH: Method 5: Download Pre-built Binary Download the appropriate binary for your platform from the releases page: Verifying Installation After installation, verify that jot is working: Updating To update jot to the latest version: If installed with go install: If installed from source: Uninstalling If installed to /usr/local/bin: If installed with go install: Using Make: Troubleshooting Command not found If you get \"command not found\" after installation, ensure the installation directory is in your PATH: Add the appropriate export line to your shell profile (, , etc.) to make it permanent. Permission denied If you get permission errors during installation: - Use for system-wide installation - Choose a user-specific installation method that doesn't require sudo - Use the method Build errors Ensure you have: - Go 1.19 or later: - All dependencies: Platform-Specific Notes macOS If you have Homebrew installed, you may want to ensure comes before system directories in your PATH to avoid conflicts with the BSD utility: Windows On Windows, use the Windows binary from the releases page or build with: Then add the directory containing to your system PATH. Linux Most Linux distributions include in the default PATH. If not, add it to your shell profile.",
      "headings": [
        "Installing Jot",
        "Prerequisites",
        "Installation Methods",
        "Method 1: Using Go Install (Recommended)",
        "Method 2: Using the Install Script",
        "Method 3: Using Make",
        "Method 4: Manual Installation",
        "Option A: User-specific installation (no sudo required)",
        "Option B: System-wide installation (requires sudo)",
        "Method 5: Download Pre-built Binary",
        "Example for macOS ARM64",
        "Verifying Installation",
        "Updating",
        "If installed with go install:",
        "If installed from source:",
        "Uninstalling",
        "If installed to /usr/local/bin:",
        "If installed with go install:",
        "Using Make:",
        "Troubleshooting",
        "Command not found",
        "For go install method",
        "For /usr/local/bin installation",
        "For user bin directory",
        "Permission denied",
        "Build errors",
        "Platform-Specific Notes",
        "macOS",
        "Windows",
        "Linux"
      ],
      "keywords": [
        "system",
        "directory",
        "install",
        "windows",
        "installation",
        "make",
        "using",
        "binary",
        "ensure",
        "method",
        "script",
        "path",
        "build",
        "installed"
      ],
      "summary": "Installing Jot There are several ways to install Jot on your system. Choose the method that works best for your setup. Prerequisites - Go 1.19 or later (for building from source) - Git (for cloning th...",
      "modified": "2025-10-21T12:58:11Z",
      "wordCount": 533,
      "readTime": "2min"
    },
    {
      "id": "benchmarks-stripe-docs-test",
      "title": "Benchmarks",
      "path": "benchmarks/stripe-docs-test.html",
      "content": "Benchmarks Stripe Documentation Test Date: 2025-01-15 Dataset: Stripe's documentation FIles: 2,679 markdown files Results",
      "headings": [
        "Benchmarks",
        "Stripe Documentation",
        "Results"
      ],
      "keywords": null,
      "summary": "Benchmarks Stripe Documentation Test Date: 2025-01-15 Dataset: Stripe's documentation FIles: 2,679 markdown files Results",
      "modified": "2025-10-21T12:58:11Z",
      "wordCount": 63,
      "readTime": "1min"
    },
    {
      "id": "roadmaps-rmap_01",
      "title": "Roadmap",
      "path": "roadmaps/rmap_01.html",
      "content": "Roadmap Current Version: 1.0 ✅ Completed Features - [x] Markdown to HTML compilation - [x] XML Table of Contents generation - [x] Multi-format export (JSON, YAML, LLM) - [x] Local development server - HTTP server with browser auto-open - [x] Symlink support for markdown access - [x] Global installation as - [x] Clean path format (removed prefixes) Version 1.1 (Quick Improvements) Timeline: 1-2 weeks - [ ] Fix duplicate TOC entries - Improve path deduplication logic - [ ] Better title extraction - Support frontmatter, multiple heading formats - [ ] Markdown compiler - Native markdown output with navigation - [ ] Config validation - Verify jot.yml on load - [ ] Better error messages - User-friendly error reporting Version 1.2 (Quality of Life) Timeline: 2-3 weeks - [ ] Live reload - Auto-refresh browser on file changes - [ ] Watch mode - Auto-rebuild on file changes - [ ] Partial builds - Only rebuild changed files - [ ] Theme support - Multiple built-in themes - [ ] Custom CSS - User-provided stylesheets - [ ] Plugin system - Extensible processors Version 2.0 (Scale \u0026 Performance) Timeline: 1 month Enhanced TOC Searchability ⭐ Full specification - [ ] Metadata-rich TOC (modified date, size, tags, summaries) - [ ] Search indexing - Sub-50ms search at 5000+ docs - [ ] Category manifests - Organized document groups - [ ] Content hashing - Change detection \u0026 caching - [ ] LLM-optimized format - 60% smaller context size Impact: 30x faster searches at 1000 docs, 224x at 5000 docs Version 2.1 (Enterprise Features) Timeline: 2 months - [ ] Multi-repository support - Aggregate docs from multiple sources - [ ] Authentication - Protected documentation - [ ] Versioning - Multiple doc versions side-by-side - [ ] Search API - RESTful/GraphQL endpoints - [ ] Analytics - Usage tracking, popular pages Version 3.0 (AI-Enhanced) Timeline: 3-4 months - [ ] Auto-tagging - NLP-based document classification - [ ] Semantic search - Meaning-based document discovery - [ ] Smart summaries - AI-generated document summaries - [ ] Cross-reference suggestions - Automatic linking - [ ] Quality scoring - Documentation completeness metrics Experimental Features No timeline - research phase - [ ] Real-time collaboration - Multiple users editing - [ ] Git integration - Version control awareness - [ ] IDE plugins - VSCode, IntelliJ extensions - [ ] Mobile app - iOS/Android documentation readers - [ ] PDF export - Print-ready documentation Performance Benchmarks Current (v1.0) | Documents | Build Time | TOC Search | Memory | |-----------|------------|------------|---------| | 100 | 0.8s | 12ms | 45MB | | 1000 | 8.2s | 450ms | 312MB | Target (v2.0) | Documents | Build Time | TOC Search | Memory | |-----------|------------|------------|---------| | 100 | 0.5s | 3ms | 40MB | | 1000 | 3.0s | 15ms | 200MB | | 5000 | 12s | 38ms | 800MB | Contributing Interested in contributing? Check out: - Open Issues - Development Guide - Architecture Overview Feedback Have ideas for features? Found a bug? - Open an issue: GitHub Issues - Email: jot@onedusk.dev --- Last updated: 2025-10-04 Next review: 2025-11-01",
      "headings": [
        "Roadmap",
        "Current Version: 1.0",
        "✅ Completed Features",
        "Version 1.1 (Quick Improvements)",
        "Version 1.2 (Quality of Life)",
        "Version 2.0 (Scale \u0026 Performance)",
        "Enhanced TOC Searchability ⭐",
        "Version 2.1 (Enterprise Features)",
        "Version 3.0 (AI-Enhanced)",
        "Experimental Features",
        "Performance Benchmarks",
        "Current (v1.0)",
        "Target (v2.0)",
        "Contributing",
        "Feedback"
      ],
      "keywords": [
        "support",
        "multiple",
        "docs",
        "documentation",
        "timeline",
        "features",
        "version",
        "search",
        "1000",
        "markdown",
        "document"
      ],
      "summary": "Roadmap Current Version: 1.0 ✅ Completed Features - [x] Markdown to HTML compilation - [x] XML Table of Contents generation - [x] Multi-format export (JSON, YAML, LLM) - [x] Local development server...",
      "modified": "2025-10-21T12:58:11Z",
      "wordCount": 540,
      "readTime": "2min"
    },
    {
      "id": "spec-architecture",
      "title": "System Architecture",
      "path": "spec/architecture.html",
      "content": "System Architecture 1. High-Level Architecture go cmd/jot/ main.go // Entry point serve.go // Server command Responsibilities: - Parse command-line arguments - Load configuration - Orchestrate core operations - Handle errors and display output 2.2 Core Engine () go internal/ search/ vcs/ api/ export/ go pkg/ config/ logger/ paths.go // Path utilities 3. Data Models 3.1 Document Model 3.2 TOC Model 3.3 Search Model 4. API Design 4.1 RESTful Endpoints 4.2 Response Formats 5. File Structure 5.1 Project Layout web/templates/ layouts/ header.html # Page header footer.html # Page footer themes/ # Theme variations highlight.js # Syntax highlighting 6. Deployment Architecture 6.1 Binary Distribution dockerfile Multi-stage build FROM golang:1.21 AS builder WORKDIR /app COPY . . RUN go build -o jot cmd/jot/main.go FROM alpine:latest RUN apk add --no-cache ca-certificates COPY --from=builder /app/jot /usr/local/bin/ ENTRYPOINT [\"jot\"] go type Plugin interface { Name() string Version() string Process(doc Document) error RegisterAPI(router gin.Engine) } yaml theme: name: \"custom-theme\" extends: \"default\" variables: primary-color: \"#007bff\" font-family: \"Inter, sans-serif\" templates: - \"custom-header.html\" yaml GitHub Actions Example - name: Build Documentation uses: onedusk/jot-action@v1 with: config: jot.yml output: ./dist GitLab CI Example build-docs: image: onedusk/jot:latest script: - jot build artifacts: paths: - dist/ ``` 10.2 Editor Integration - VS Code extension for live preview - IntelliJ plugin for documentation generation - Vim plugin for markdown validation This architecture provides a scalable, maintainable foundation for the Jot documentation generator with clear separation of concerns and extensibility points.",
      "headings": [
        "System Architecture",
        "1. High-Level Architecture",
        "2. Component Architecture",
        "2.1 CLI Layer (`cmd/jot/`)",
        "2.2 Core Engine (`internal/`)",
        "2.3 Service Layer (`internal/`)",
        "2.4 Package Layer (`pkg/`)",
        "3. Data Models",
        "3.1 Document Model",
        "3.2 TOC Model",
        "3.3 Search Model",
        "4. API Design",
        "4.1 RESTful Endpoints",
        "4.2 Response Formats",
        "5. File Structure",
        "5.1 Project Layout",
        "5.2 Template Structure",
        "6. Deployment Architecture",
        "6.1 Binary Distribution",
        "6.2 Docker Support",
        "Multi-stage build",
        "7. Performance Considerations",
        "7.1 Concurrency Model",
        "7.2 Caching Strategy",
        "7.3 Memory Management",
        "8. Security Architecture",
        "8.1 Input Validation",
        "8.2 Access Control",
        "9. Extensibility",
        "9.1 Plugin Interface",
        "9.2 Theme System",
        "10. Integration Points",
        "10.1 CI/CD Integration",
        "GitHub Actions Example",
        "GitLab CI Example",
        "10.2 Editor Integration"
      ],
      "keywords": [
        "build",
        "model",
        "architecture",
        "plugin",
        "documentation"
      ],
      "summary": "System Architecture 1. High-Level Architecture go cmd/jot/ main.go // Entry point serve.go // Server command Responsibilities: - Parse command-line arguments - Load configuration - Orchestrate core op...",
      "modified": "2025-10-21T12:58:11Z",
      "wordCount": 759,
      "readTime": "3min"
    },
    {
      "id": "spec-pseudocode",
      "title": "Pseudocode Design",
      "path": "spec/pseudocode.html",
      "content": "Pseudocode Design 1. Main Application Flow 2. File Scanning Algorithm 3. TOC Generation Algorithm 4. HTML Compilation Algorithm 5. Search Implementation 6. LLM Export Algorithm 7. Version Control Integration 8. Web Server Implementation 9. CLI Command Handlers 10. Error Handling This pseudocode provides a comprehensive design for all major components of the Jot documentation generator, ready for implementation in Go.",
      "headings": [
        "Pseudocode Design",
        "1. Main Application Flow",
        "2. File Scanning Algorithm",
        "3. TOC Generation Algorithm",
        "4. HTML Compilation Algorithm",
        "5. Search Implementation",
        "6. LLM Export Algorithm",
        "7. Version Control Integration",
        "8. Web Server Implementation",
        "9. CLI Command Handlers",
        "10. Error Handling"
      ],
      "keywords": [
        "algorithm",
        "implementation"
      ],
      "summary": "Pseudocode Design 1. Main Application Flow 2. File Scanning Algorithm 3. TOC Generation Algorithm 4. HTML Compilation Algorithm 5. Search Implementation 6. LLM Export Algorithm 7. Version Control Inte...",
      "modified": "2025-10-21T12:58:11Z",
      "wordCount": 1031,
      "readTime": "4min"
    },
    {
      "id": "spec-requirements",
      "title": "Requirements Spec.",
      "path": "spec/requirements.html",
      "content": "Requirements Spec. 1. Executive Summary Jot is a modern documentation generator designed to replace JetBrains' deprecated Writerside IDE. It provides a fast, simple, and platform-independent solution for aggregating markdown files into deployable web documentation with advanced features for LLM/AI integration. 2. Functional Requirements 2.1 File Scanning System - FR-001: Recursively scan directories for markdown files (.md) - FR-002: Support configurable ignore patterns (.jotignore file) - FR-003: Preserve original directory structure and file metadata - FR-004: Handle symlinks and nested directories gracefully - FR-005: Support glob patterns for include/exclude rules 2.2 Table of Contents Generation - FR-006: Generate hierarchical XML TOC from file structure - FR-007: Extract titles from H1 tags or frontmatter - FR-008: Support custom ordering (weight-based or alphabetical) - FR-009: Handle multi-level nesting (unlimited depth) - FR-010: Auto-generate unique IDs for each entry 2.3 HTML Compilation - FR-011: Convert markdown to semantic HTML5 - FR-012: Automatically resolve cross-references between documents - FR-013: Generate navigation elements (breadcrumbs, sidebar, TOC) - FR-014: Support syntax highlighting for code blocks - FR-015: Bundle CSS/JS assets with optimization 2.4 LLM/Agent Integration - FR-016: Export documentation as structured JSON - FR-017: Generate YAML format for configuration tools - FR-018: Create vector embeddings for semantic search - FR-019: Provide RESTful API for programmatic access - FR-020: Support chunk-based content splitting 2.5 Search Functionality - FR-021: Full-text search across all documentation - FR-022: Fuzzy matching for typo tolerance - FR-023: Real-time search suggestions - FR-024: Search result highlighting - FR-025: Pre-built search indices for performance 2.6 Version Control - FR-026: Track file changes with simple history - FR-027: Generate diffs between versions - FR-028: Support webhook notifications for changes - FR-029: Integrate with git for change detection - FR-030: Maintain change logs 2.7 CLI Interface - FR-031: Command-line interface using Cobra framework - FR-032: Support init, build, serve, watch commands - FR-033: Configurable via flags and config files - FR-034: Provide helpful error messages and usage guides - FR-035: Support batch operations 2.8 Web Server - FR-036: Built-in development server with Gin - FR-037: Hot reload on file changes - FR-038: CORS support for API access - FR-039: Static file serving with caching - FR-040: WebSocket support for live updates 3. Non-Functional Requirements 3.1 Performance - NFR-001: Build time \u003c 1 second for 1000 files - NFR-002: Search latency \u003c 50ms - NFR-003: Memory usage \u003c 100MB for typical projects - NFR-004: Startup time \u003c 500ms - NFR-005: Support projects with 10,000+ files 3.2 Usability - NFR-006: Single binary distribution (no dependencies) - NFR-007: Cross-platform support (Windows, macOS, Linux) - NFR-008: Intuitive CLI with helpful documentation - NFR-009: Zero-config operation with sensible defaults - NFR-010: Clear error messages with resolution hints 3.3 Security - NFR-011: Input sanitization to prevent XSS - NFR-012: Path traversal protection - NFR-013: Rate limiting on API endpoints - NFR-014: Secure defaults for web server - NFR-015: No execution of user content 3.4 Compatibility - NFR-016: CommonMark compliant markdown parsing - NFR-017: Standard HTML5 output - NFR-018: JSON Schema compliant exports - NFR-019: OpenAPI specification for APIs - NFR-020: UTF-8 encoding throughout 4. User Stories 4.1 Developer Stories - As a developer, I want to generate documentation from my markdown files with a single command - As a developer, I want to preview my documentation locally with hot reload - As a developer, I want to customize the look and feel with themes - As a developer, I want to integrate documentation generation into my CI/CD pipeline 4.2 AI/LLM Stories - As an AI system, I want to access documentation via structured JSON API - As an LLM, I want to search documentation semantically using embeddings - As an agent, I want to retrieve specific sections without parsing HTML - As a chatbot, I want to get contextual information about code examples 4.3 End User Stories - As a user, I want to search documentation quickly and accurately - As a user, I want to navigate between related topics easily - As a user, I want to view documentation offline - As a user, I want to access documentation on any device 5. Acceptance Criteria 5.1 File Scanning - Discovers all markdown files in specified directories - JSON output validates against schema - Must use only standard library where possible - Must compile to a single binary - Must work offline (no external dependencies) - Must be open source friendly 7. Dependencies - Go 1.21+ (build time only) - Gin web framework - Cobra CLI framework - Blackfriday markdown parser - No runtime dependencies 8. Success Metrics - Adoption by 100+ projects in first 3 months - 95%+ user satisfaction in surveys - \u003c5 critical bugs in first release - Performance targets met in 95% of use cases - Active community contributions",
      "headings": [
        "Requirements Spec.",
        "1. Executive Summary",
        "2. Functional Requirements",
        "2.1 File Scanning System",
        "2.2 Table of Contents Generation",
        "2.3 HTML Compilation",
        "2.4 LLM/Agent Integration",
        "2.5 Search Functionality",
        "2.6 Version Control",
        "2.7 CLI Interface",
        "2.8 Web Server",
        "3. Non-Functional Requirements",
        "3.1 Performance",
        "3.2 Usability",
        "3.3 Security",
        "3.4 Compatibility",
        "4. User Stories",
        "4.1 Developer Stories",
        "4.2 AI/LLM Stories",
        "4.3 End User Stories",
        "5. Acceptance Criteria",
        "5.1 File Scanning",
        "7. Dependencies",
        "8. Success Metrics"
      ],
      "keywords": [
        "want",
        "files",
        "search",
        "directories",
        "single",
        "file",
        "performance",
        "generate",
        "requirements",
        "documentation",
        "markdown",
        "json",
        "stories",
        "server",
        "time",
        "developer",
        "user",
        "framework",
        "changes",
        "support",
        "access",
        "projects",
        "between",
        "must"
      ],
      "summary": "Requirements Spec. 1. Executive Summary Jot is a modern documentation generator designed to replace JetBrains' deprecated Writerside IDE. It provides a fast, simple, and platform-independent solution ...",
      "modified": "2025-10-21T12:58:11Z",
      "wordCount": 814,
      "readTime": "3min"
    }
  ],
  "version": "1.0"
}